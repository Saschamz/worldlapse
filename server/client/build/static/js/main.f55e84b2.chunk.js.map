{"version":3,"sources":["keys.js","Components/Spinner/Spinner.jsx","Components/Settings/Settings.jsx","Components/Map/Map.jsx","Components/Feed/Feed.jsx","Components/Modal/Modal.jsx","App.js","serviceWorker.js","index.js"],"names":["keys","Spinner","props","_props$position","position","x","y","react_default","a","createElement","className","style","transform","concat","Settings","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","range","_this2","_this$props","toggleLocal","setRange","toggled","openModal","label","onClick","htmlFor","id","type","min","max","defaultValue","onChange","e","setState","target","value","onMouseUp","name","checked","Component","Mapbox","ReactMapboxGl","accessToken","Map","markers","countryOffsets","settings","searchMethod","spinner","loading","handleClick","bind","assertThisInitialized","getCameras","axios","create","method","baseURL","headers","X-Mashape-Key","X-Mashape-Host","countryCode","limit","arguments","length","undefined","getOffsets","then","res","webcams","data","result","spinnerObject","prevState","objectSpread","toConsumableArray","_ref","el","refs","mapContainer","classList","add","setTimeout","remove","_","evt","_this3","_evt$lngLat","lngLat","lng","lat","_evt$point","point","_this$state$settings","animateOverlay","get","features","filter","stat","match","properties","short_code","requestWebcams","_this4","location","_ref2","player","src","live","embed","day","longitude","latitude","city","country","lib","updateFeed","coordinates","key","local","_this5","Components_Spinner_Spinner","Components_Settings_Settings","ref","onContextMenu","layout","icon-image","map","marker","renderMarker","Feed","_props$data","title","Modal","closeModal","App","renderFeed","feedData","showModal","toggleModal","localStorage","getItem","setItem","_this$state","Components_Modal_Modal","Components_Feed_Feed","Components_Map_Map","Boolean","window","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f55e84b2.chunk.js","sourcesContent":["\nexport default {\n  mapboxToken: 'pk.eyJ1Ijoic2FzY2hhbXoiLCJhIjoiY2pueWE3NGN0MGR0YjNwbzV3Zm5udjFkZiJ9.Yhe8XyJjVRuDsBHs9SsBMw',\n  webcamsToken: 'dEOco1PlZlmshIPqrt4ycn7xZE9zp1Mscwbjsnu53Bztt9kFJ2',\n};\n","import React from 'react';\nimport './Spinner.css';\n\nconst Spinner = props => {\n  const { x, y } = props.position;\n  \n  return (\n    <div className=\"spinner-container\" style={{transform: `translate(${x - 30}px, ${y - 30}px)`}}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n}\n\nexport default Spinner;\n","import React, { Component } from 'react';\nimport './Settings.css';\n\nclass Settings extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      range: 125\n    }\n  }\n\n  render() {\n    const { toggleLocal, setRange, toggled, openModal } = this.props;\n    const label = toggled ? 'Local' : 'Global';\n\n    return (\n      <div className=\"toggle\">\n        <div className=\"btn-info\" onClick={() => openModal()}>\n          <i className=\"fas fa-info-circle info\"></i>\n        </div>\n        <div className=\"settings-container\">\n          { toggled && \n          <div className=\"range-container\">\n            <label className=\"label\" htmlFor=\"range-slider\">{this.state.range} km</label>\n            <input \n              className=\"range-slider\"\n              id=\"range-slider\"\n              type=\"range\" \n              min=\"1\" \n              max=\"250\"\n              defaultValue=\"125\"\n              onChange={e => this.setState({ range: e.target.value })}\n              onMouseUp={e => setRange(e.target.value)} />\n          </div>\n          }\n          <label className=\"label\" htmlFor=\"myonoffswitch\">{label}</label>\n          <div className=\"onoffswitch\">\n              <input \n                type=\"checkbox\" \n                className=\"onoffswitch-checkbox\" \n                name=\"onoffswitch\" \n                onClick={e => toggleLocal(e.target.checked)}\n                id=\"myonoffswitch\" />\n              <label className=\"onoffswitch-label\" htmlFor=\"myonoffswitch\">\n                  <span className=\"onoffswitch-inner\"></span>\n                  <span className=\"onoffswitch-switch\"></span>\n              </label>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","import React, { Component } from 'react';\nimport ReactMapboxGl, { Layer, Feature } from \"react-mapbox-gl\";\nimport keys from '../../keys.js';\nimport axios from 'axios';\nimport './Map.css';\nimport Spinner from '../Spinner/Spinner';\nimport Settings from '../Settings/Settings';\n\nconst Mapbox = ReactMapboxGl({ accessToken: keys.mapboxToken });\n\nclass Map extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      markers: [],\n      countryOffsets: {},\n      settings: {\n        searchMethod: 'global',\n        range: 125\n      },\n      spinner: {\n        loading: false,\n        position: {\n          x: null,\n          y: null,\n        }\n      },\n    };\n    \n    this.handleClick = this.handleClick.bind(this);\n    this.toggleLocal = this.toggleLocal.bind(this);\n    this.setRange = this.setRange.bind(this);\n  }\n\n  componentDidMount() {\n    this.getCameras = axios.create({\n      method: 'GET',\n      baseURL: 'https://webcamstravel.p.mashape.com/webcams/list/',\n      headers: {\n        'X-Mashape-Key': keys.webcamsToken,\n        'X-Mashape-Host': 'webcamstravel.p.mashape.com',\n      },\n    });\n  }\n\n  getOffsets(countryCode) {\n    const { countryOffsets } = this.state;\n    if (!countryOffsets[countryCode]) countryOffsets[countryCode] = 0;\n\n    return countryOffsets;\n  }\n\n  requestWebcams(countryCode, limit = 50) {\n    const countryOffsets = this.getOffsets(countryCode);\n\n    this.getCameras(`limit=${limit},${countryOffsets[countryCode]}/country=${countryCode}&show=webcams:player,location`)\n      .then(res => {\n        countryOffsets[countryCode] += 50;\n        const { webcams } = res.data.result;\n        const spinner = this.spinnerObject(false);\n\n        this.setState(prevState => ({...prevState, markers: [...prevState.markers, ...webcams], countryOffsets, spinner }));\n      }); \n  }\n\n  spinnerObject(loading, x, y) {\n    const { spinner } = this.state;\n    spinner.loading = loading;\n    x && ( spinner.position.x = x );\n    y && ( spinner.position.y = y );\n\n    return spinner;\n  }\n\n  animateOverlay({ x, y }) {\n    const el = this.refs.mapContainer;\n    el.classList.add('overlay');\n    const spinner = this.spinnerObject(true, x, y);\n\n    this.setState(prevState => ({ ...prevState, spinner }));\n    setTimeout(() => el.classList.remove('overlay'), 400);\n  }\n  \n  handleClick(_, evt) {\n    const { lng, lat } = evt.lngLat;\n    const { x, y } = evt.point;\n    const { searchMethod, range } = this.state.settings;\n\n    this.animateOverlay({ x, y });\n\n    if (searchMethod === 'global') {\n      axios.get(`https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?access_token=${keys.mapboxToken}&country`)\n        .then(res => {\n          if (res.data.features.length > 0) {\n            const countryCode = res.data.features.filter(stat => stat.id.match(/country/))[0].properties.short_code;\n            this.requestWebcams(countryCode);\n          }        \n          else {\n            const spinner = this.spinnerObject(false);\n            this.setState(prevState => ({ ...prevState, spinner }));\n          }\n        });\n    } else {\n      this.getCameras(`nearby=${lat},${lng},${range}&show=webcams:player,location`)\n        .then(res => {\n          const { webcams } = res.data.result;\n          const spinner = this.spinnerObject(false);\n          \n          this.setState(prevState => ({...prevState, markers: [...prevState.markers, ...webcams], spinner }));\n        }); \n    }\n  }\n\n  renderMarker({ location, player }) {\n    const src = player.live.embed || player.day.embed;\n    const { longitude, latitude, city, country } = location;\n\n    return (\n      <Feature \n        onClick={() => this.props.updateFeed({ src, city, country })} \n        coordinates={[longitude, latitude]}\n        key={longitude + latitude} />\n    );\n  }\n\n  toggleLocal(local) {\n    const { settings } = this.state;\n    settings.searchMethod = local ? 'local' : 'global';\n    \n    this.setState(prevState => ({ ...prevState, settings }));\n  }\n  \n  setRange(range) {\n    const { settings } = this.state;\n    settings.range = range;\n\n    this.setState(prevState => ({ ...prevState, settings }));\n  }\n\n  render() {\n    const { markers } = this.state;\n    const { loading } = this.state.spinner;\n    const { openModal } = this.props;\n    const toggled = this.state.settings.searchMethod === 'local';\n    \n    return (\n      <div>\n        { loading && <Spinner position={this.state.spinner.position} /> }\n        <Settings \n          toggleLocal={this.toggleLocal} \n          setRange={this.setRange} \n          openModal={openModal}\n          toggled={toggled} />\n        <div className=\"map-container\" ref=\"mapContainer\">\n          <Mapbox\n            style='mapbox://styles/mapbox/streets-v8'\n            className=\"map\"\n            onContextMenu={this.handleClick}>\n            <Layer\n              type=\"symbol\"\n              id=\"marker\"\n              layout={{ \"icon-image\": \"marker-15\" }}>\n              { markers.map(marker => this.renderMarker(marker)) }\n            </Layer>\n          </Mapbox>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","import React from 'react';\nimport './Feed.css';\n\nconst Feed = props => {\n  const { src, country, city } = props.data;\n\n  return (\n    <div className=\"feed\">\n      <h1>{country}, {city}</h1>\n      <iframe title=\"feed\" src={src + '?autoplay=1'}></iframe>\n    </div>\n  );\n}\n\nexport default Feed;\n","import React from 'react';\nimport './Modal.css';\n\nconst Modal = props => (\n  <div className=\"modal-container\">\n    <div className=\"modal\">\n      <h1>Worldlapse</h1>\n      <div className=\"rows\">\n        <div className=\"row\">\n          <i className=\"fas fa-hand-point-up\"></i>\n          Rightclick anywhere to search for live feeds/timelapses from that country.\n        </div>\n        <div className=\"row\">\n          <i className=\"fas fa-sliders-h\"></i>\n          Use the toggle and slider in the bottom left corner to \n          instead search within a 1-250 kilometer radius.\n        </div>\n        <div className=\"row\">\n          <i className=\"fas fa-hand-point-up\"></i>\n          Keep rightclicking if you want to load more feeds.\n        </div>\n        <div className=\"row\">\n          <i className=\"fas fa-video\"></i>\n          When you're ready, leftclick on one of the markers to see what's going on.\n        </div>\n      </div>\n      <button onClick={props.closeModal}>Got it!</button>\n    </div>\n  </div>\n);\n\nexport default Modal;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Map from './Components/Map/Map';\nimport Feed from './Components/Feed/Feed';\nimport Modal from './Components/Modal/Modal';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      renderFeed: false,\n      feedData: null,\n      showModal: false,\n    };\n\n    this.updateFeed = this.updateFeed.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n  \n  componentDidMount() {\n    if (!localStorage.getItem('modal')) {\n      this.setState(prevState => ({ ...prevState, showModal: true }));\n      localStorage.setItem('modal', 'seen');\n    }\n  }\n\n  updateFeed({ src, city, country }) {\n    this.setState(prevState => ({ ...prevState, renderFeed: true, feedData: { src, city, country } }));\n  }\n\n  toggleModal() {\n    this.setState(prevState => ({ ...prevState, showModal: !prevState.showModal })); \n  }\n\n  render() {\n    const { renderFeed, feedData, showModal } = this.state;\n\n    return (\n      <div className=\"App\">\n        { showModal && <Modal closeModal={this.toggleModal} /> }\n        { renderFeed && <Feed data={feedData} /> }\n        <Map updateFeed={this.updateFeed} openModal={this.toggleModal}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}