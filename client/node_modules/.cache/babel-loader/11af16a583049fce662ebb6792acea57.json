{"ast":null,"code":"import _toConsumableArray from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/sascha/Desktop/projects/instaverse/client/src/Components/Map/Map.jsx\";\nimport React, { Component } from 'react';\nimport ReactMapboxGl, { Layer, Feature } from \"react-mapbox-gl\";\nimport keys from '../../keys.js';\nimport axios from 'axios';\nimport './Map.css';\nimport Spinner from '../Spinner/Spinner';\nvar Mapbox = ReactMapboxGl({\n  accessToken: keys.mapboxToken\n});\n\nvar Map =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Map, _Component);\n\n  function Map(props) {\n    var _this;\n\n    _classCallCheck(this, Map);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Map).call(this, props));\n    _this.state = {\n      markers: [],\n      countryOffsets: {},\n      spinner: {\n        loading: false,\n        position: {\n          x: null,\n          y: null\n        }\n      }\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.requestWebcamsNear = _this.requestWebcamsNear.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Map, [{\n    key: \"getOffsets\",\n    value: function getOffsets(countryCode) {\n      var countryOffsets = this.state.countryOffsets;\n      if (!countryOffsets[countryCode]) countryOffsets[countryCode] = 0;\n      return countryOffsets;\n    }\n  }, {\n    key: \"requestWebcams\",\n    value: function requestWebcams(countryCode) {\n      var _this2 = this;\n\n      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n      var countryOffsets = this.getOffsets(countryCode);\n      axios.get(\"https://webcamstravel.p.mashape.com/webcams/list/limit=\".concat(limit, \",\").concat(countryOffsets[countryCode], \"/country=\").concat(countryCode, \"&show=webcams:player,location\"), {\n        headers: {\n          'X-Mashape-Key': keys.webcamsToken,\n          'X-Mashape-Host': 'webcamstravel.p.mashape.com'\n        }\n      }).then(function (res) {\n        countryOffsets[countryCode] += 50;\n        var webcams = res.data.result.webcams;\n        var spinner = _this2.state.spinner;\n        spinner.loading = false;\n\n        _this2.setState(function (prevState) {\n          return _objectSpread({}, prevState, {\n            markers: _toConsumableArray(prevState.markers).concat(_toConsumableArray(webcams)),\n            countryOffsets: countryOffsets,\n            spinner: spinner\n          });\n        });\n      });\n    }\n  }, {\n    key: \"requestWebcamsNear\",\n    value: function requestWebcamsNear(_, evt) {\n      var _this3 = this;\n\n      var _evt$lngLat = evt.lngLat,\n          lng = _evt$lngLat.lng,\n          lat = _evt$lngLat.lat;\n      var _evt$point = evt.point,\n          x = _evt$point.x,\n          y = _evt$point.y;\n      this.animateOverlay({\n        x: x,\n        y: y\n      });\n      axios.get(\"https://webcamstravel.p.mashape.com/webcams/list/nearby=\".concat(lat, \",\").concat(lng, \",200\"), {\n        headers: {\n          'X-Mashape-Key': keys.webcamsToken,\n          'X-Mashape-Host': 'webcamstravel.p.mashape.com'\n        }\n      }).then(function (res) {\n        var webcams = res.data.result.webcams;\n        var spinner = _this3.state.spinner;\n        spinner.loading = false;\n\n        _this3.setState(function (prevState) {\n          return _objectSpread({}, prevState, {\n            markers: _toConsumableArray(prevState.markers).concat(_toConsumableArray(webcams)),\n            spinner: spinner\n          });\n        });\n      });\n    }\n  }, {\n    key: \"animateOverlay\",\n    value: function animateOverlay(_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n      var el = this.refs.mapContainer;\n      el.classList.add('overlay');\n      var spinner = {\n        loading: true,\n        position: {\n          x: x,\n          y: y\n        }\n      };\n      this.setState(function (prevState) {\n        return _objectSpread({}, prevState, {\n          spinner: spinner\n        });\n      });\n      setTimeout(function () {\n        return el.classList.remove('overlay');\n      }, 400);\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(_, evt) {\n      var _this4 = this;\n\n      var _evt$lngLat2 = evt.lngLat,\n          lng = _evt$lngLat2.lng,\n          lat = _evt$lngLat2.lat;\n      var _evt$point2 = evt.point,\n          x = _evt$point2.x,\n          y = _evt$point2.y;\n      this.animateOverlay({\n        x: x,\n        y: y\n      });\n      axios.get(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\".concat(lat, \",\").concat(lng, \".json?access_token=\").concat(keys.mapboxToken, \"&country\")).then(function (res) {\n        if (res.data.features.length > 0) {\n          var countryCode = res.data.features.filter(function (stat) {\n            return stat.id.match(/country/);\n          })[0].properties.short_code;\n\n          _this4.requestWebcams(countryCode);\n        } else {\n          var spinner = _this4.state.spinner;\n          spinner.loading = false;\n\n          _this4.setState(function (prevState) {\n            return _objectSpread({}, prevState, {\n              spinner: spinner\n            });\n          });\n        }\n      });\n    }\n  }, {\n    key: \"renderMarker\",\n    value: function renderMarker(_ref2) {\n      var _this5 = this;\n\n      var location = _ref2.location,\n          player = _ref2.player;\n      var src = player.live.embed || player.day.embed;\n      var longitude = location.longitude,\n          latitude = location.latitude,\n          city = location.city,\n          country = location.country;\n      return React.createElement(Feature, {\n        onClick: function onClick() {\n          return _this5.props.updateFeed({\n            src: src,\n            city: city,\n            country: country\n          });\n        },\n        coordinates: [longitude, latitude],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var markers = this.state.markers;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, this.state.spinner.loading && React.createElement(Spinner, {\n        position: this.state.spinner.position,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"map-container\",\n        ref: \"mapContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Mapbox, {\n        style: \"mapbox://styles/mapbox/streets-v8\",\n        containerStyle: {\n          height: \"100vh\",\n          width: \"100vw\"\n        },\n        onContextMenu: this.handleClick,\n        onDblClick: this.requestWebcamsNear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Layer, {\n        type: \"symbol\",\n        id: \"marker\",\n        layout: {\n          \"icon-image\": \"marker-15\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, markers.map(function (marker) {\n        return _this6.renderMarker(marker);\n      })))));\n    }\n  }]);\n\n  return Map;\n}(Component);\n\nexport default Map;","map":{"version":3,"sources":["/Users/sascha/Desktop/projects/instaverse/client/src/Components/Map/Map.jsx"],"names":["React","Component","ReactMapboxGl","Layer","Feature","keys","axios","Spinner","Mapbox","accessToken","mapboxToken","Map","props","state","markers","countryOffsets","spinner","loading","position","x","y","handleClick","bind","requestWebcamsNear","countryCode","limit","getOffsets","get","headers","webcamsToken","then","res","webcams","data","result","setState","prevState","_","evt","lngLat","lng","lat","point","animateOverlay","el","refs","mapContainer","classList","add","setTimeout","remove","features","length","filter","stat","id","match","properties","short_code","requestWebcams","location","player","src","live","embed","day","longitude","latitude","city","country","updateFeed","height","width","map","marker","renderMarker"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactMapboxGl, { Layer, Feature } from \"react-mapbox-gl\";\nimport keys from '../../keys.js';\nimport axios from 'axios';\nimport './Map.css';\nimport Spinner from '../Spinner/Spinner';\n\nconst Mapbox = ReactMapboxGl({ accessToken: keys.mapboxToken });\n\nclass Map extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      markers: [],\n      countryOffsets: {},\n      spinner: {\n        loading: false,\n        position: {\n          x: null,\n          y: null,\n        }\n      },\n    };\n    \n    this.handleClick = this.handleClick.bind(this);\n    this.requestWebcamsNear = this.requestWebcamsNear.bind(this);\n  }\n\n  getOffsets(countryCode) {\n    const { countryOffsets } = this.state;\n    if (!countryOffsets[countryCode]) countryOffsets[countryCode] = 0;\n\n    return countryOffsets;\n  }\n\n  requestWebcams(countryCode, limit = 50) {\n    const countryOffsets = this.getOffsets(countryCode);\n\n    axios.get(`https://webcamstravel.p.mashape.com/webcams/list/limit=${limit},${countryOffsets[countryCode]}/country=${countryCode}&show=webcams:player,location`, {\n      headers: {\n        'X-Mashape-Key': keys.webcamsToken,\n        'X-Mashape-Host': 'webcamstravel.p.mashape.com',\n      }\n    }).then(res => {\n      countryOffsets[countryCode] += 50;\n      const { webcams } = res.data.result;\n      const { spinner } = this.state;\n      spinner.loading = false;\n      this.setState(prevState => ({...prevState, markers: [...prevState.markers, ...webcams], countryOffsets, spinner }));\n    }); \n  }\n  \n  requestWebcamsNear(_, evt) {\n\n    const { lng, lat } = evt.lngLat;\n    const { x, y } = evt.point; \n\n    this.animateOverlay({ x, y });\n    \n    axios.get(`https://webcamstravel.p.mashape.com/webcams/list/nearby=${lat},${lng},200`, {\n      headers: {\n        'X-Mashape-Key': keys.webcamsToken,\n        'X-Mashape-Host': 'webcamstravel.p.mashape.com',\n      }\n    }).then(res => {\n      const { webcams } = res.data.result;\n      const { spinner } = this.state;\n      spinner.loading = false;\n      this.setState(prevState => ({...prevState, markers: [...prevState.markers, ...webcams], spinner }));\n    }); \n  }\n\n  animateOverlay({ x, y }) {\n    const el = this.refs.mapContainer;\n    el.classList.add('overlay');\n    const spinner = {\n      loading: true,\n      position: { x, y },\n    };\n\n    this.setState(prevState => ({ ...prevState, spinner }));\n    setTimeout(() => el.classList.remove('overlay'), 400);\n  }\n  \n  handleClick(_, evt) {\n    const { lng, lat } = evt.lngLat;\n    const { x, y } = evt.point; \n\n    this.animateOverlay({ x, y });\n\n    axios.get(`https://api.mapbox.com/geocoding/v5/mapbox.places/${lat},${lng}.json?access_token=${keys.mapboxToken}&country`)\n      .then(res => {\n        if (res.data.features.length > 0) {\n          const countryCode = res.data.features.filter(stat => stat.id.match(/country/))[0].properties.short_code;\n          this.requestWebcams(countryCode);\n        }        \n        else {\n          const { spinner } = this.state;\n          spinner.loading = false;\n          this.setState(prevState => ({ ...prevState, spinner }));\n        }\n      });\n  }\n\n  renderMarker({ location, player }) {\n    const src = player.live.embed || player.day.embed;\n    const { longitude, latitude, city, country } = location;\n\n    return (\n      <Feature onClick={() => this.props.updateFeed({ src, city, country })} coordinates={[longitude, latitude]}/>\n    );\n  }\n\n  render() {\n    const { markers } = this.state;\n    \n    return (\n      <div>\n        { this.state.spinner.loading && <Spinner position={this.state.spinner.position}/> }\n      <div className=\"map-container\" ref=\"mapContainer\">\n        <Mapbox\n          style='mapbox://styles/mapbox/streets-v8'\n          containerStyle={{\n            height: \"100vh\",\n            width: \"100vw\"\n          }}\n          onContextMenu={this.handleClick}\n          onDblClick={this.requestWebcamsNear}\n          >\n          <Layer\n            type=\"symbol\"\n            id=\"marker\"\n            layout={{ \"icon-image\": \"marker-15\" }}>\n            { markers.map(marker => this.renderMarker(marker)) }\n          </Layer>\n        </Mapbox>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}