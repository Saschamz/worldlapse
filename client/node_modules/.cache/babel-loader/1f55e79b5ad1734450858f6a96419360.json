{"ast":null,"code":"import _toConsumableArray from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sascha/Desktop/projects/instaverse/client/src/Components/Map/Map.jsx\";\nimport React, { Component } from 'react';\nimport ReactMapboxGl, { Layer, Feature } from \"react-mapbox-gl\";\nimport keys from '../../keys.js';\nimport axios from 'axios';\nvar Mapbox = ReactMapboxGl({\n  accessToken: keys.mapboxToken\n});\n\nvar Map =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Map, _Component);\n\n  function Map(props) {\n    var _this;\n\n    _classCallCheck(this, Map);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Map).call(this, props));\n    _this.state = {\n      markers: [],\n      countryOffsets: {}\n    };\n    return _this;\n  }\n\n  _createClass(Map, [{\n    key: \"getOffsets\",\n    value: function getOffsets(countryCode) {\n      var countryOffsets = this.state.countryOffsets;\n      if (!countryOffsets[countryCode]) countryOffsets[countryCode] = 0;\n      return countryOffsets;\n    }\n  }, {\n    key: \"requestWebcams\",\n    value: function requestWebcams(countryCode) {\n      var _this2 = this;\n\n      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n      var countryOffsets = this.getOffsets(countryCode);\n      axios.get(\"https://webcamstravel.p.mashape.com/webcams/list/limit=\".concat(limit, \",\").concat(countryOffsets[countryCode], \"/country=\").concat(countryCode, \"&show=webcams:player,location\"), {\n        headers: {\n          'X-Mashape-Key': keys.webcamsToken,\n          'X-Mashape-Host': 'webcamstravel.p.mashape.com'\n        }\n      }).then(function (res) {\n        countryOffsets[countryCode] += 50;\n        var webcams = res.data.result.webcams;\n\n        _this2.setState(function (prevState) {\n          return _objectSpread({}, prevState, {\n            markers: _toConsumableArray(prevState.markers).concat(_toConsumableArray(webcams)),\n            countryOffsets: countryOffsets\n          });\n        });\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(_, evt) {\n      var _this3 = this;\n\n      console.log(evt, _);\n      var _evt$lngLat = evt.lngLat,\n          lng = _evt$lngLat.lng,\n          lat = _evt$lngLat.lat;\n      axios.get(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\".concat(lng, \",\").concat(lat, \".json?access_token=\").concat(keys.mapboxToken, \"&country\")).then(function (res) {\n        if (res.data.features.length > 0) {\n          var countryCode = res.data.features.filter(function (stat) {\n            return stat.id.match(/country/);\n          })[0].properties.short_code;\n\n          _this3.requestWebcams(countryCode);\n        }\n      });\n    }\n  }, {\n    key: \"renderMarker\",\n    value: function renderMarker(_ref) {\n      var _this4 = this;\n\n      var location = _ref.location,\n          player = _ref.player;\n      var src = player.live.embed || player.day.embed;\n      var longitude = location.longitude,\n          latitude = location.latitude,\n          city = location.city,\n          country = location.country;\n      return React.createElement(Feature, {\n        onClick: function onClick() {\n          return _this4.props.updateFeed({\n            src: src,\n            city: city,\n            country: country\n          });\n        },\n        coordinates: [longitude, latitude],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }) // <Feature onClick={(e) => {\n      //   if (!e) var e = window.event\n      //   e.cancelBubble = true;\n      //   if (e.stopPropagation) e.stopPropagation();\n      // }} coordinates={[longitude, latitude]}/>\n      ;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var markers = this.state.markers;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(Mapbox, {\n        style: \"mapbox://styles/mapbox/streets-v8\",\n        containerStyle: {\n          height: \"100vh\",\n          width: \"100vw\"\n        },\n        onClick: this.handleClick.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(Layer, {\n        type: \"symbol\",\n        id: \"marker\",\n        layout: {\n          \"icon-image\": \"marker-15\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, markers.map(function (marker) {\n        return _this5.renderMarker(marker);\n      }))));\n    }\n  }]);\n\n  return Map;\n}(Component);\n\nexport default Map;","map":{"version":3,"sources":["/Users/sascha/Desktop/projects/instaverse/client/src/Components/Map/Map.jsx"],"names":["React","Component","ReactMapboxGl","Layer","Feature","keys","axios","Mapbox","accessToken","mapboxToken","Map","props","state","markers","countryOffsets","countryCode","limit","getOffsets","get","headers","webcamsToken","then","res","webcams","data","result","setState","prevState","_","evt","console","log","lngLat","lng","lat","features","length","filter","stat","id","match","properties","short_code","requestWebcams","location","player","src","live","embed","day","longitude","latitude","city","country","updateFeed","height","width","handleClick","bind","map","marker","renderMarker"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactMapboxGl, { Layer, Feature } from \"react-mapbox-gl\";\nimport keys from '../../keys.js';\nimport axios from 'axios';\n\nconst Mapbox = ReactMapboxGl({\n  accessToken: keys.mapboxToken,\n});\n\nclass Map extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      markers: [],\n      countryOffsets: {},\n    };\n  }\n\n  getOffsets(countryCode) {\n    const { countryOffsets } = this.state;\n    if (!countryOffsets[countryCode]) countryOffsets[countryCode] = 0;\n\n    return countryOffsets;\n  }\n\n  requestWebcams(countryCode, limit = 50) {\n    const countryOffsets = this.getOffsets(countryCode);\n\n    axios.get(`https://webcamstravel.p.mashape.com/webcams/list/limit=${limit},${countryOffsets[countryCode]}/country=${countryCode}&show=webcams:player,location`, {\n      headers: {\n        'X-Mashape-Key': keys.webcamsToken,\n        'X-Mashape-Host': 'webcamstravel.p.mashape.com',\n      }\n    }).then(res => {\n      countryOffsets[countryCode] += 50;\n      const { webcams } = res.data.result;\n      this.setState(prevState => ({...prevState, markers: [...prevState.markers, ...webcams], countryOffsets }));\n    }); \n  }\n  \n  handleClick(_, evt) {\n    console.log(evt, _);\n    const { lng, lat } = evt.lngLat;\n    axios.get(`https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?access_token=${keys.mapboxToken}&country`)\n      .then(res => {\n        if (res.data.features.length > 0) {\n          const countryCode = res.data.features.filter(stat => stat.id.match(/country/))[0].properties.short_code;\n          this.requestWebcams(countryCode);\n        }\n      });\n  }\n\n  renderMarker({ location, player }) {\n    const src = player.live.embed || player.day.embed;\n    const { longitude, latitude, city, country } = location;\n\n    return (\n      <Feature onClick={() => this.props.updateFeed({ src, city, country })} coordinates={[longitude, latitude]}/>\n      // <Feature onClick={(e) => {\n      //   if (!e) var e = window.event\n      //   e.cancelBubble = true;\n      //   if (e.stopPropagation) e.stopPropagation();\n      // }} coordinates={[longitude, latitude]}/>\n    );\n  }\n\n  render() {\n    const { markers } = this.state;\n    \n    return (\n      <div>\n        <Mapbox\n          style='mapbox://styles/mapbox/streets-v8'\n          containerStyle={{\n            height: \"100vh\",\n            width: \"100vw\"\n          }}\n          onClick={this.handleClick.bind(this)}\n        >\n          <Layer\n            type=\"symbol\"\n            id=\"marker\"\n            layout={{ \"icon-image\": \"marker-15\" }}>\n            { markers.map(marker => this.renderMarker(marker)) }\n          </Layer>\n        </Mapbox>\n      </div>\n    );\n  }\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}