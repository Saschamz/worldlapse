{"ast":null,"code":"import _toConsumableArray from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/sascha/Desktop/projects/instaverse/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/sascha/Desktop/projects/instaverse/client/src/Components/Map/Map.jsx\";\nimport React, { Component } from 'react';\nimport ReactMapboxGl, { Layer, Feature } from \"react-mapbox-gl\";\nimport keys from '../../keys.js';\nimport axios from 'axios';\nimport './Map.css';\nimport Spinner from '../Spinner/Spinner';\nimport Settings from '../Settings/Settings';\nvar Mapbox = ReactMapboxGl({\n  accessToken: keys.mapboxToken\n});\n\nvar Map =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Map, _Component);\n\n  function Map(props) {\n    var _this;\n\n    _classCallCheck(this, Map);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Map).call(this, props));\n    _this.state = {\n      markers: [],\n      countryOffsets: {},\n      settings: {\n        searchMethod: 'global',\n        range: 5\n      },\n      spinner: {\n        loading: false,\n        position: {\n          x: null,\n          y: null\n        }\n      }\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleLocal = _this.toggleLocal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setRange = _this.setRange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Map, [{\n    key: \"getOffsets\",\n    value: function getOffsets(countryCode) {\n      var countryOffsets = this.state.countryOffsets;\n      if (!countryOffsets[countryCode]) countryOffsets[countryCode] = 0;\n      return countryOffsets;\n    }\n  }, {\n    key: \"requestWebcams\",\n    value: function requestWebcams(countryCode) {\n      var _this2 = this;\n\n      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n      var countryOffsets = this.getOffsets(countryCode);\n      axios.get(\"https://webcamstravel.p.mashape.com/webcams/list/limit=\".concat(limit, \",\").concat(countryOffsets[countryCode], \"/country=\").concat(countryCode, \"&show=webcams:player,location\"), {\n        headers: {\n          'X-Mashape-Key': keys.webcamsToken,\n          'X-Mashape-Host': 'webcamstravel.p.mashape.com'\n        }\n      }).then(function (res) {\n        countryOffsets[countryCode] += 50;\n        var webcams = res.data.result.webcams;\n        var spinner = _this2.state.spinner;\n        spinner.loading = false;\n\n        _this2.setState(function (prevState) {\n          return _objectSpread({}, prevState, {\n            markers: _toConsumableArray(prevState.markers).concat(_toConsumableArray(webcams)),\n            countryOffsets: countryOffsets,\n            spinner: spinner\n          });\n        });\n      });\n    }\n  }, {\n    key: \"animateOverlay\",\n    value: function animateOverlay(_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n      var el = this.refs.mapContainer;\n      el.classList.add('overlay');\n      var spinner = {\n        loading: true,\n        position: {\n          x: x,\n          y: y\n        }\n      };\n      this.setState(function (prevState) {\n        return _objectSpread({}, prevState, {\n          spinner: spinner\n        });\n      });\n      setTimeout(function () {\n        return el.classList.remove('overlay');\n      }, 400);\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(_, evt) {\n      var _this3 = this;\n\n      var _evt$lngLat = evt.lngLat,\n          lng = _evt$lngLat.lng,\n          lat = _evt$lngLat.lat;\n      var _evt$point = evt.point,\n          x = _evt$point.x,\n          y = _evt$point.y;\n      var _this$state$settings = this.state.settings,\n          searchMethod = _this$state$settings.searchMethod,\n          range = _this$state$settings.range;\n      this.animateOverlay({\n        x: x,\n        y: y\n      });\n\n      if (searchMethod === 'global') {\n        axios.get(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\".concat(lng, \",\").concat(lat, \".json?access_token=\").concat(keys.mapboxToken, \"&country\")).then(function (res) {\n          if (res.data.features.length > 0) {\n            var countryCode = res.data.features.filter(function (stat) {\n              return stat.id.match(/country/);\n            })[0].properties.short_code;\n\n            _this3.requestWebcams(countryCode);\n          } else {\n            var spinner = _this3.state.spinner;\n            spinner.loading = false;\n\n            _this3.setState(function (prevState) {\n              return _objectSpread({}, prevState, {\n                spinner: spinner\n              });\n            });\n          }\n        });\n      } else {\n        axios.get(\"https://webcamstravel.p.mashape.com/webcams/list/nearby=\".concat(lat, \",\").concat(lng, \",\").concat(range, \"&show=webcams:player,location\"), {\n          headers: {\n            'X-Mashape-Key': keys.webcamsToken,\n            'X-Mashape-Host': 'webcamstravel.p.mashape.com'\n          }\n        }).then(function (res) {\n          var webcams = res.data.result.webcams;\n          var spinner = _this3.state.spinner;\n          spinner.loading = false;\n\n          _this3.setState(function (prevState) {\n            return _objectSpread({}, prevState, {\n              markers: _toConsumableArray(prevState.markers).concat(_toConsumableArray(webcams)),\n              spinner: spinner\n            });\n          });\n        });\n      }\n    }\n  }, {\n    key: \"renderMarker\",\n    value: function renderMarker(_ref2) {\n      var _this4 = this;\n\n      var location = _ref2.location,\n          player = _ref2.player;\n      var src = player.live.embed || player.day.embed;\n      var longitude = location.longitude,\n          latitude = location.latitude,\n          city = location.city,\n          country = location.country;\n      return React.createElement(Feature, {\n        onClick: function onClick() {\n          return _this4.props.updateFeed({\n            src: src,\n            city: city,\n            country: country\n          });\n        },\n        coordinates: [longitude, latitude],\n        key: longitude + latitude,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"toggleLocal\",\n    value: function toggleLocal(local) {\n      var settings = this.state.settings;\n      settings.searchMethod = local ? 'local' : 'global';\n      this.setState(function (prevState) {\n        return _objectSpread({}, prevState, {\n          settings: settings\n        });\n      });\n    }\n  }, {\n    key: \"setRange\",\n    value: function setRange(range) {\n      var settings = this.state.settings;\n      settings.range = range;\n      this.setState(function (prevState) {\n        return _objectSpread({}, prevState, {\n          settings: settings\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var markers = this.state.markers;\n      var toggled = this.state.settings.searchRange === 'local';\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, this.state.spinner.loading && React.createElement(Spinner, {\n        position: this.state.spinner.position,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(Settings, {\n        toggleLocal: this.toggleLocal,\n        setRange: this.setRange,\n        toggled: toggled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"map-container\",\n        ref: \"mapContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Mapbox, {\n        style: \"mapbox://styles/mapbox/streets-v8\",\n        containerStyle: {\n          height: \"100vh\",\n          width: \"100vw\"\n        },\n        onContextMenu: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(Layer, {\n        type: \"symbol\",\n        id: \"marker\",\n        layout: {\n          \"icon-image\": \"marker-15\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, markers.map(function (marker) {\n        return _this5.renderMarker(marker);\n      })))));\n    }\n  }]);\n\n  return Map;\n}(Component);\n\nexport default Map;","map":{"version":3,"sources":["/Users/sascha/Desktop/projects/instaverse/client/src/Components/Map/Map.jsx"],"names":["React","Component","ReactMapboxGl","Layer","Feature","keys","axios","Spinner","Settings","Mapbox","accessToken","mapboxToken","Map","props","state","markers","countryOffsets","settings","searchMethod","range","spinner","loading","position","x","y","handleClick","bind","toggleLocal","setRange","countryCode","limit","getOffsets","get","headers","webcamsToken","then","res","webcams","data","result","setState","prevState","el","refs","mapContainer","classList","add","setTimeout","remove","_","evt","lngLat","lng","lat","point","animateOverlay","features","length","filter","stat","id","match","properties","short_code","requestWebcams","location","player","src","live","embed","day","longitude","latitude","city","country","updateFeed","local","toggled","searchRange","height","width","map","marker","renderMarker"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactMapboxGl, { Layer, Feature } from \"react-mapbox-gl\";\nimport keys from '../../keys.js';\nimport axios from 'axios';\nimport './Map.css';\nimport Spinner from '../Spinner/Spinner';\nimport Settings from '../Settings/Settings';\n\nconst Mapbox = ReactMapboxGl({ accessToken: keys.mapboxToken });\n\nclass Map extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      markers: [],\n      countryOffsets: {},\n      settings: {\n        searchMethod: 'global',\n        range: 5\n      },\n      spinner: {\n        loading: false,\n        position: {\n          x: null,\n          y: null,\n        }\n      },\n    };\n    \n    this.handleClick = this.handleClick.bind(this);\n    this.toggleLocal = this.toggleLocal.bind(this);\n    this.setRange = this.setRange.bind(this);\n  }\n\n  getOffsets(countryCode) {\n    const { countryOffsets } = this.state;\n    if (!countryOffsets[countryCode]) countryOffsets[countryCode] = 0;\n\n    return countryOffsets;\n  }\n\n  requestWebcams(countryCode, limit = 50) {\n    const countryOffsets = this.getOffsets(countryCode);\n\n    axios.get(`https://webcamstravel.p.mashape.com/webcams/list/limit=${limit},${countryOffsets[countryCode]}/country=${countryCode}&show=webcams:player,location`, {\n      headers: {\n        'X-Mashape-Key': keys.webcamsToken,\n        'X-Mashape-Host': 'webcamstravel.p.mashape.com',\n      }\n    }).then(res => {\n      countryOffsets[countryCode] += 50;\n      const { webcams } = res.data.result;\n      const { spinner } = this.state;\n      spinner.loading = false;\n      this.setState(prevState => ({...prevState, markers: [...prevState.markers, ...webcams], countryOffsets, spinner }));\n    }); \n  }\n\n  animateOverlay({ x, y }) {\n    const el = this.refs.mapContainer;\n    el.classList.add('overlay');\n    const spinner = {\n      loading: true,\n      position: { x, y },\n    };\n\n    this.setState(prevState => ({ ...prevState, spinner }));\n    setTimeout(() => el.classList.remove('overlay'), 400);\n  }\n  \n  handleClick(_, evt) {\n    const { lng, lat } = evt.lngLat;\n    const { x, y } = evt.point;\n    const { searchMethod, range } = this.state.settings;\n\n    this.animateOverlay({ x, y });\n\n    if (searchMethod === 'global') {\n      axios.get(`https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?access_token=${keys.mapboxToken}&country`)\n        .then(res => {\n          if (res.data.features.length > 0) {\n            const countryCode = res.data.features.filter(stat => stat.id.match(/country/))[0].properties.short_code;\n            this.requestWebcams(countryCode);\n          }        \n          else {\n            const { spinner } = this.state;\n            spinner.loading = false;\n            this.setState(prevState => ({ ...prevState, spinner }));\n          }\n        });\n    } else {\n      axios.get(`https://webcamstravel.p.mashape.com/webcams/list/nearby=${lat},${lng},${range}&show=webcams:player,location`, {\n        headers: {\n          'X-Mashape-Key': keys.webcamsToken,\n          'X-Mashape-Host': 'webcamstravel.p.mashape.com',\n        }\n      }).then(res => {\n        const { webcams } = res.data.result;\n        const { spinner } = this.state;\n        spinner.loading = false;\n        this.setState(prevState => ({...prevState, markers: [...prevState.markers, ...webcams], spinner }));\n      }); \n    }\n\n  }\n\n  renderMarker({ location, player }) {\n    const src = player.live.embed || player.day.embed;\n    const { longitude, latitude, city, country } = location;\n\n    return (\n      <Feature \n        onClick={() => this.props.updateFeed({ src, city, country })} \n        coordinates={[longitude, latitude]}\n        key={longitude + latitude} />\n    );\n  }\n\n  toggleLocal(local) {\n    const { settings } = this.state;\n    settings.searchMethod = local ? 'local' : 'global';\n    \n    this.setState(prevState => ({ ...prevState, settings }));\n  }\n  \n  setRange(range) {\n    const { settings } = this.state;\n    settings.range = range;\n    this.setState(prevState => ({ ...prevState, settings }));\n  }\n\n  render() {\n    const { markers } = this.state;\n    const toggled = this.state.settings.searchRange === 'local';\n    \n    return (\n      <div>\n        { this.state.spinner.loading && <Spinner position={this.state.spinner.position}/> }\n        <Settings \n          toggleLocal={this.toggleLocal} \n          setRange={this.setRange} \n          toggled={toggled}\n          />\n        <div className=\"map-container\" ref=\"mapContainer\">\n          <Mapbox\n            style='mapbox://styles/mapbox/streets-v8'\n            containerStyle={{\n              height: \"100vh\",\n              width: \"100vw\"\n            }}\n            onContextMenu={this.handleClick}\n            >\n            <Layer\n              type=\"symbol\"\n              id=\"marker\"\n              layout={{ \"icon-image\": \"marker-15\" }}>\n              { markers.map(marker => this.renderMarker(marker)) }\n            </Layer>\n          </Mapbox>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}